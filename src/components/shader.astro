---
---
<canvas id="myCanvas" width="800" height="512"></canvas>
<script is:inline>
function ShaderToyLite(canvasId) {
    var hdr =
    `#version 300 es
    #ifdef GL_ES
    precision highp float;
    precision highp int;
    precision mediump sampler3D;
    #endif
    #define texture2D texture
    uniform vec3      iResolution;           // viewport resolution (in pixels)
    uniform float     iTime;                 // shader playback time (in seconds)
    uniform float     iTimeDelta;            // render time (in seconds)
    uniform float     iFrameRate;            // shader frame rate
    uniform int       iFrame;                // shader playback frame
    uniform float     iChannelTime[4];       // channel playback time (in seconds)
    uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
    uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
    uniform sampler2D iChannel0;             // input channel 0
    uniform sampler2D iChannel1;             // input channel 1
    uniform sampler2D iChannel2;             // input channel 2
    uniform sampler2D iChannel3;             // input channel 3
    uniform vec4      iDate;                 // (year, month, day, unixtime in seconds)
    uniform float     iSampleRate;           // sound sample rate (i.e., 44100)
    out vec4          frag_out_color;
    void mainImage( out vec4 c, in vec2 f );
    void main( void )
    {
        vec4 color = vec4(0.0,0.0,0.0,0.0);
        mainImage( color, gl_FragCoord.xy );
        frag_out_color = vec4(color);
    }
    `;

    const basicVertexShader =
    `#version 300 es
    #ifdef GL_ES
    precision highp float;
    precision highp int;
    precision mediump sampler3D;
    #endif
    in vec2 vertexInPosition;
    void main() {
        gl_Position = vec4(vertexInPosition, 0.0, 1.0);
    }
    `;

    const quadVertices = new Float32Array([
        -1.0, -1.0,
        1.0, -1.0,
        -1.0,  1.0,
        1.0,  1.0,
        -1.0,  1.0,
        1.0, -1.0
    ]);


    var opts = { alpha: false,
                depth: false,
                stencil: false,
                premultipliedAlpha: false,
                antialias: true,
                preserveDrawingBuffer: false,
                powerPreference: "high-performance" };

    var gl = document.getElementById(canvasId).getContext('webgl2', opts);
    const canvas = document.getElementById(canvasId);
    canvas.style.width='100%';
    canvas.style.height='100%';
    canvas.width  = canvas.offsetWidth;
    canvas.height = canvas.offsetHeight;
    // timing
    var isPlaying = false;
    var firstDrawTime = 0;
    var prevDrawTime = 0;

    // callback
    var onDrawCallback;

    // uniforms
    var iFrame = 0;
    var iMouse = {x: 0, y: 0, clickX: 0, clickY: 0};

    // shader common source
    var common = "";

    // render passes variables. valid keys:
    //   'A', 'B', 'C', 'D', 'Image'
    var sourcecode = {};// fragment shader code
    var ichannels = {}; // texture inputs
    var atexture = {};  // front texture (input/output)
    var btexture = {};  // back texture  (input/output)
    var aframebuf = {}; // front buffer (output)
    var bframebuf = {}; // back buffer (output)
    var program = {};   // webgl program
    var location = {}; // uniform location
    var flip = {};      // a b flip

    var setup = () => {
        gl.getExtension( 'OES_texture_float_linear');
        gl.getExtension( 'OES_texture_half_float_linear');
        gl.getExtension( 'EXT_color_buffer_float');
        gl.getExtension( 'WEBGL_debug_shaders');

        ['A', 'B', 'C', 'D', 'Image'].forEach((key) => {
            sourcecode[key] = "";
            ichannels[key] = {};
            program[key] = null;
            location[key] = {};
            if (key != 'Image') {
                atexture[key] = createTexture();
                btexture[key] = createTexture();
                aframebuf[key] = createFrameBuffer(atexture[key]);
                bframebuf[key] = createFrameBuffer(btexture[key]);
                flip[key] = false;
            }
        });

        // bind the geometry
        quadBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, quadBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, quadVertices, gl.STATIC_DRAW);

        // Set viewport size
        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);

        var canvas = document.getElementById(canvasId);

        window.addEventListener('resize', function() {
            gl.canvas.width = canvas.width;
            gl.canvas.height = canvas.height;
            gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
        });

        canvas.addEventListener("mousemove", (event) => {
            iMouse.x = event.offsetX;
            iMouse.y = canvas.height - event.offsetY;
        });

        canvas.addEventListener("mousedown", (event) => {
            iMouse.clickX = event.offsetX;
            iMouse.clickY = canvas.height - event.offsetY;
        });

        canvas.addEventListener("mouseup", () => {
            iMouse.clickX = 0;
            iMouse.clickY = 0;
        });
    }

    var createTexture = () => {
        var texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, gl.canvas.width, gl.canvas.height, 0, gl.RGBA, gl.FLOAT, null);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        return texture;
    }

    var createFrameBuffer = (texture) => {
        var framebuffer = gl.createFramebuffer();
        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
        gl.bindTexture(gl.TEXTURE_2D, null);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        return framebuffer;
    };

    var compileProgram = (key) => {
        var vert = gl.createShader(gl.VERTEX_SHADER);
        gl.shaderSource(vert, basicVertexShader);
        gl.compileShader(vert);

        if (!gl.getShaderParameter(vert, gl.COMPILE_STATUS)) {
            console.error('Vertex Shader compilation failed: ' + gl.getShaderInfoLog(vert));
            gl.deleteShader(vert);
            return null;
        }

        var source = hdr + common + sourcecode[key];
        var frag = gl.createShader(gl.FRAGMENT_SHADER);
        gl.shaderSource(frag, source);
        gl.compileShader(frag);

        if (!gl.getShaderParameter(frag, gl.COMPILE_STATUS)) {
            console.error('Fragment Shader compilation failed: ' + gl.getShaderInfoLog(frag));
            console.error(source);
            gl.deleteShader(frag);
            return null;
        }

        var program = gl.createProgram();
        gl.attachShader(program, vert);
        gl.attachShader(program, frag);
        gl.linkProgram(program);

        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
            console.error('Program initialization failed: ' + gl.getProgramInfoLog(program));
            return null;
        }

        // uniform locations
        location[key]["iResolution"]        = gl.getUniformLocation(program, "iResolution");
        location[key]["iTime"]              = gl.getUniformLocation(program, "iTime");
        location[key]["iTimeDelta"]         = gl.getUniformLocation(program, "iTimeDelta");
        location[key]["iFrameRate"]         = gl.getUniformLocation(program, "iFrameRate");
        location[key]["iFrame"]             = gl.getUniformLocation(program, "iFrame");
        location[key]["iChannelTime"]       = gl.getUniformLocation(program, "iChannelTime[0]");
        location[key]["iChannelResolution"] = gl.getUniformLocation(program, "iChannelResolution[0]");
        location[key]["iChannel0"]          = gl.getUniformLocation(program, "iChannel0");
        location[key]["iChannel1"]          = gl.getUniformLocation(program, "iChannel1");
        location[key]["iChannel2"]          = gl.getUniformLocation(program, "iChannel2");
        location[key]["iChannel3"]          = gl.getUniformLocation(program, "iChannel3");
        location[key]["iMouse"]             = gl.getUniformLocation(program, "iMouse");
        location[key]["iDate"]              = gl.getUniformLocation(program, "iDate");
        location[key]["iSampleRate"]        = gl.getUniformLocation(program, "iSampleRate");
        location[key]["vertexInPosition"]   = gl.getAttribLocation(program, "vertexInPosition");

        return program;
    };

    var repeat = (times, arr) => {
        let result = [];
        for (let i = 0; i < times; i++) {
            result = [...result, ...arr];
        }
        return result;
    }

    var setShader = (config, key) => {
        if (config) {
            if (config.source) {
                sourcecode[key] = config.source;
                program[key] = compileProgram(key);
                if (program[key] == null) {
                    console.error("Failed to compile " + key);
                }
            }
            for (let i = 0; i < 4; i++) {
                var s = config[`iChannel${i}`];
                if (s == "A" || s == "B" || s == "C" || s == "D") {
                    ichannels[key][i] = s;
                }
            }
        } else {
            sourcecode[key] = "";
            program[key] = null;
        }
    };

    var draw = () => {

        // current time
        var now = isPlaying ? Date.now() : prevDrawTime;
        var date = new Date(now);

        // first draw?
        if (firstDrawTime == 0) {
            firstDrawTime = now;
        }

        // call callback
        if (onDrawCallback) {
            onDrawCallback();
        }

        // time difference between frames in seconds
        var iTimeDelta = (now - prevDrawTime) * 0.001;

        // time in seconds
        var iTime = (now - firstDrawTime) * 0.001;
        var iDate = [date.getFullYear(), date.getMonth(), date.getDate(), date.getTime() * 0.001];

        // channel uniforms
        var iChannelTimes = new Float32Array(repeat(4, [iTime]));
        var iChannelResolutions = new Float32Array(repeat(4, [gl.canvas.width, gl.canvas.height, 0]));

        ['A', 'B', 'C', 'D', 'Image'].forEach((key) => {

            if (program[key]) {

                // framebuffer
                if (key === "Image") {
                    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
                } else {
                    var output = flip[key] ? bframebuf[key] : aframebuf[key];
                    gl.bindFramebuffer(gl.FRAMEBUFFER, output);
                }

                // textures
                for (let i = 0; i < 4; i++) {
                    var chkey = ichannels[key][i];
                    if (chkey) {
                        var input = flip[chkey] ? atexture[chkey] : btexture[chkey];
                        gl.activeTexture(gl[`TEXTURE${i}`]);
                        gl.bindTexture(gl.TEXTURE_2D, input);
                    }
                }

                // program
                gl.useProgram(program[key]);

                // uniforms
                gl.uniform3f( location[key]["iResolution"], gl.canvas.width, gl.canvas.height, 1.0);
                gl.uniform1f( location[key]["iTime"], iTime);
                gl.uniform1f( location[key]["iTimeDelta"], iTimeDelta);
                gl.uniform1f( location[key]["iFrameRate"], 60);
                gl.uniform1i( location[key]["iFrame"], iFrame);
                gl.uniform1fv(location[key]["iChannelTime"], iChannelTimes);
                gl.uniform3fv(location[key]["iChannelResolution"], iChannelResolutions);
                gl.uniform1i( location[key]["iChannel0"], 0);
                gl.uniform1i( location[key]["iChannel1"], 1);
                gl.uniform1i( location[key]["iChannel2"], 2);
                gl.uniform1i( location[key]["iChannel3"], 3);
                gl.uniform4f( location[key]["iMouse"], iMouse.x, iMouse.y, iMouse.clickX, iMouse.clickY);
                gl.uniform4f( location[key]["iDate"], iDate[0], iDate[1], iDate[2], iDate[3]);
                gl.uniform1f( location[key]["iSampleRate"], 44100);

                // viewport
                gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);

                // vertexs
                gl.bindBuffer(gl.ARRAY_BUFFER, quadBuffer);
                gl.vertexAttribPointer(location[key]["vertexInPosition"], 2, gl.FLOAT, false, 0, 0);
                gl.enableVertexAttribArray(location[key]["vertexInPosition"]);

                // draw
                gl.drawArrays(gl.TRIANGLES, 0, 6);

                flip[key] = !flip[key];
            }
        });

        // time of last draw
        prevDrawTime = now;

        // frame counter
        iFrame++;
    };

    // Animation loop
    var animate = () => {
        if (isPlaying) {
            draw();
            requestAnimationFrame(animate);
        }
    };

    this.setCommon = (source) => {
        if (source === undefined) {source = "";}
        if (source === null) {source = "";}
        common = source;
        ['A', 'B', 'C', 'D', 'Image'].forEach((key) => {
            if (program[key]) {
                program[key] = compileProgram(key);
            }
        });
    };

    this.setBufferA = (config) => {
        setShader(config, 'A');
    };

    this.setBufferB = (config) => {
        setShader(config, 'B');
    };

    this.setBufferC = (config) => {
        setShader(config, 'C');
    };

    this.setBufferD = (config) => {
        setShader(config, 'D');
    };

    this.setImage = (config) => {
        setShader(config, 'Image');
    };

    this.setOnDraw = (callback) => {
        onDrawCallback = callback;
    }

    this.addTexture = (texture, key) => {
        atexture[key] = texture;
        btexture[key] = texture;
        flip[key] = false;
    }

    this.getTime = () => {
        return (prevDrawTime - firstDrawTime) * 0.001;
    }

    this.getIsPlaying = () => isPlaying;

    this.reset = () => {
        var now = new Date();
        firstDrawTime = now;
        prevDrawTime = now;
        iFrame = 0;
        draw();
    }

    this.pause = () => {
        isPlaying = false;
    }

    this.play = () => {
        if (!isPlaying) {
            isPlaying = true;
            var now = Date.now();
            var elapsed = prevDrawTime - firstDrawTime;
            firstDrawTime = now - elapsed;
            prevDrawTime = now;
            animate();
        }
    }

    setup();
}
</script>
<script is:inline id="Common" type="x-shader/x-fragment">
    // Adapted from FastNoiseLite

    // Switch between using floats or doubles for input position
    #define FNLfloat float
    //#define FNLfloat double

    // Utilities
    int _fnlFastFloor(FNLfloat f) { return int(floor(f)); }
    float _fnlInterpQuintic(float t) { return t * t * t * (t * (t * 6.f - 15.f) + 10.f); }
    float _fnlLerp(float a, float b, float t) { return mix(a, b, t); }


    // From here on, this is private implementation
    // Constants
    const float GRADIENTS_3D[] =float[]
    (
        0.f, 1.f, 1.f, 0.f,  0.f,-1.f, 1.f, 0.f,  0.f, 1.f,-1.f, 0.f,  0.f,-1.f,-1.f, 0.f,
        1.f, 0.f, 1.f, 0.f, -1.f, 0.f, 1.f, 0.f,  1.f, 0.f,-1.f, 0.f, -1.f, 0.f,-1.f, 0.f,
        1.f, 1.f, 0.f, 0.f, -1.f, 1.f, 0.f, 0.f,  1.f,-1.f, 0.f, 0.f, -1.f,-1.f, 0.f, 0.f,
        0.f, 1.f, 1.f, 0.f,  0.f,-1.f, 1.f, 0.f,  0.f, 1.f,-1.f, 0.f,  0.f,-1.f,-1.f, 0.f,
        1.f, 0.f, 1.f, 0.f, -1.f, 0.f, 1.f, 0.f,  1.f, 0.f,-1.f, 0.f, -1.f, 0.f,-1.f, 0.f,
        1.f, 1.f, 0.f, 0.f, -1.f, 1.f, 0.f, 0.f,  1.f,-1.f, 0.f, 0.f, -1.f,-1.f, 0.f, 0.f,
        0.f, 1.f, 1.f, 0.f,  0.f,-1.f, 1.f, 0.f,  0.f, 1.f,-1.f, 0.f,  0.f,-1.f,-1.f, 0.f,
        1.f, 0.f, 1.f, 0.f, -1.f, 0.f, 1.f, 0.f,  1.f, 0.f,-1.f, 0.f, -1.f, 0.f,-1.f, 0.f,
        1.f, 1.f, 0.f, 0.f, -1.f, 1.f, 0.f, 0.f,  1.f,-1.f, 0.f, 0.f, -1.f,-1.f, 0.f, 0.f,
        0.f, 1.f, 1.f, 0.f,  0.f,-1.f, 1.f, 0.f,  0.f, 1.f,-1.f, 0.f,  0.f,-1.f,-1.f, 0.f,
        1.f, 0.f, 1.f, 0.f, -1.f, 0.f, 1.f, 0.f,  1.f, 0.f,-1.f, 0.f, -1.f, 0.f,-1.f, 0.f,
        1.f, 1.f, 0.f, 0.f, -1.f, 1.f, 0.f, 0.f,  1.f,-1.f, 0.f, 0.f, -1.f,-1.f, 0.f, 0.f,
        0.f, 1.f, 1.f, 0.f,  0.f,-1.f, 1.f, 0.f,  0.f, 1.f,-1.f, 0.f,  0.f,-1.f,-1.f, 0.f,
        1.f, 0.f, 1.f, 0.f, -1.f, 0.f, 1.f, 0.f,  1.f, 0.f,-1.f, 0.f, -1.f, 0.f,-1.f, 0.f,
        1.f, 1.f, 0.f, 0.f, -1.f, 1.f, 0.f, 0.f,  1.f,-1.f, 0.f, 0.f, -1.f,-1.f, 0.f, 0.f,
        1.f, 1.f, 0.f, 0.f,  0.f,-1.f, 1.f, 0.f, -1.f, 1.f, 0.f, 0.f,  0.f,-1.f,-1.f, 0.f
    );

    // Hashing
    const int PRIME_X = 501125321;
    const int PRIME_Y = 1136930381;
    const int PRIME_Z = 1720413743;

    int _fnlHash3D(int seed, int xPrimed, int yPrimed, int zPrimed)
    {
        int hash = seed ^ xPrimed ^ yPrimed ^ zPrimed;

        hash *= 0x27d4eb2d;
        return hash;
    }

    struct fnl_state
    {
        // Seed used for noise.
        // @remark Default: 1337
        int seed;
        
        // The frequency for noise.
        // @remark Default: 0.01
        float frequency;
        
        // The maximum warp distance from original position when using DomainWarp.
        // @remark Default: 1.0
        float domain_warp_amp;
    };

    fnl_state fnlCreateState(int seed)
    {
        fnl_state newState;
        newState.seed = seed;
        newState.frequency = 0.01f;
        newState.domain_warp_amp = 1.0f;
        
        return newState;
    }

    float _fnlGradCoord3D(int seed, int xPrimed, int yPrimed, int zPrimed, float xd, float yd, float zd)
    {
        int hash = _fnlHash3D(seed, xPrimed, yPrimed, zPrimed);
        hash ^= hash >> 15;
        hash &= 63 << 2;
        return xd * GRADIENTS_3D[hash] + yd * GRADIENTS_3D[hash | 1] + zd * GRADIENTS_3D[hash | 2];
    }

    float _fnlSinglePerlin3D(int seed, FNLfloat x, FNLfloat y, FNLfloat z)
    {
        int x0 = _fnlFastFloor(x);
        int y0 = _fnlFastFloor(y);
        int z0 = _fnlFastFloor(z);

        float xd0 = x - float(x0);
        float yd0 = y - float(y0);
        float zd0 = z - float(z0);
        float xd1 = xd0 - 1.f;
        float yd1 = yd0 - 1.f;
        float zd1 = zd0 - 1.f;

        float xs = _fnlInterpQuintic(xd0);
        float ys = _fnlInterpQuintic(yd0);
        float zs = _fnlInterpQuintic(zd0);

        x0 *= PRIME_X;
        y0 *= PRIME_Y;
        z0 *= PRIME_Z;
        int x1 = x0 + PRIME_X;
        int y1 = y0 + PRIME_Y;
        int z1 = z0 + PRIME_Z;

        float xf00 = _fnlLerp(_fnlGradCoord3D(seed, x0, y0, z0, xd0, yd0, zd0), _fnlGradCoord3D(seed, x1, y0, z0, xd1, yd0, zd0), xs);
        float xf10 = _fnlLerp(_fnlGradCoord3D(seed, x0, y1, z0, xd0, yd1, zd0), _fnlGradCoord3D(seed, x1, y1, z0, xd1, yd1, zd0), xs);
        float xf01 = _fnlLerp(_fnlGradCoord3D(seed, x0, y0, z1, xd0, yd0, zd1), _fnlGradCoord3D(seed, x1, y0, z1, xd1, yd0, zd1), xs);
        float xf11 = _fnlLerp(_fnlGradCoord3D(seed, x0, y1, z1, xd0, yd1, zd1), _fnlGradCoord3D(seed, x1, y1, z1, xd1, yd1, zd1), xs);

        float yf0 = _fnlLerp(xf00, xf10, ys);
        float yf1 = _fnlLerp(xf01, xf11, ys);

        return _fnlLerp(yf0, yf1, zs) * 0.964921414852142333984375;
    }

    float fnlGetNoise3D(fnl_state state, FNLfloat x, FNLfloat y, FNLfloat z)
    {
        x *= state.frequency;
        y *= state.frequency;
        z *= state.frequency;
        return _fnlSinglePerlin3D(state.seed, x, y, z);
    }
    </script>
    <script is:inline id="Image" type="x-shader/x-fragment">
    void mainImage( out vec4 U, in vec2 pos )
    {
        fnl_state state = fnlCreateState(1337);
            state.frequency = .005f;
        state.domain_warp_amp = 119.0;

        float x = gl_FragCoord.x + iTime * 30.0;
        float y = 50.f + iTime * 5.0;
        float z = gl_FragCoord.y + iTime * 10.0;

        float noise = fnlGetNoise3D(state, x, y, z) / 2.f + 0.5f;

        // Posterize
        float levels = 10.0;
        float rounding_threshold = 0.0015;

        float rounded = floor(noise * levels) / levels;
        float rounding_error = abs(rounded - noise) / 2.0;

        //vec3 lines = vec3(1.0,0.80,1.0);
        //vec3 bg = vec3(0.65,0.30,1.0);
        //vec3 lines = vec3(1.0,1.0,1.0);
        //vec3 bg = vec3(0.,0.,0.);
        vec3 lines = vec3(0.69, 0.9, 0.69);
        vec3 bg = vec3(0.08, 0.43, 0.31);

        if (rounding_error < rounding_threshold) {
            U = vec4(lines, 1.0);
        } else {
            U = vec4(bg, 1.0);
        }
    }
</script>
<script is:inline>
    var toy = new ShaderToyLite("myCanvas");
    toy.setCommon(document.getElementById("Common").innerText);
    toy.setImage({source: document.getElementById("Image").innerText});
    toy.play();
</script>

<style>
    #myCanvas {
        min-width: 800px;
    }
</style>